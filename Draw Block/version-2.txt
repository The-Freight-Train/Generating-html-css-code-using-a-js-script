Needs fixing: 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Block Drawer</title>
    <style>
        #canvas {
            position: relative;
            width: 1240px;
            height: 1200px;
            border: 1px solid #000;
            cursor: crosshair; /* Change cursor to crosshair for drawing */
        }

        .block {
            position: absolute;
            background-color: lightgrey;
            border: 2px solid #000;
            cursor: move; /* Change cursor to move when hovering over block */
            padding: 5px;
        }

        .block input[type="text"] {
            width: 100%;
            border: none;
            background: none;
            text-align: center;
            font-family: inherit;
        }

        .resizer {
            width: 8px;
            height: 8px;
            background-color: #000;
            position: absolute;
            bottom: 0;
            right: 0;
            cursor: se-resize;
        }

        .selected {
            border: 2px dashed blue; /* Add a dashed border to indicate selection */
        }
    </style>
</head>
<body>
    <div id="canvas" onmousedown="handleMouseDown(event)" onmousemove="stretchBlock(event)" onmouseup="stopDrawing(event)"></div>
    <button onclick="zoomIn()">Zoom In</button>
    <button onclick="zoomOut()">Zoom Out</button>
    <button onclick="undo()">Undo</button>
    <select id="blockType">
        <option value="default">Default</option>
        <option value="navbar">Navbar with &lt;ul&gt;</option>
        <!-- Add more block type options as needed -->
    </select>
    <button onclick="setBlockType()">Set Block Type</button>
    <button onclick="generateCode()">Generate HTML/CSS</button>

    <script>
        var isDrawing = false;
        var isResizing = false;
        var isMoving = false;
        var initialX, initialY;
        var offsetX, offsetY;
        var currentBlock;
        var blocks = []; // Array to store created blocks
        var selectedBlock = null; // Track the currently selected block
        var canvasRect;
        var blockType = 'default'; // Default block type

        window.onload = function() {
            canvasRect = document.getElementById('canvas').getBoundingClientRect();
        }

        function setBlockType() {
            blockType = document.getElementById('blockType').value;
        }

        function handleMouseDown(event) {
            if (event.target.tagName === 'INPUT') return; // Prevent drawing if clicking on an input field
            if (event.button === 2) {
                // Right mouse button click
                startMove(event);
            } else {
                // Left mouse button click
                var clickedBlock = event.target.closest('.block');
                if (clickedBlock) {
                    selectBlock(clickedBlock);
                    startMove(event);
                } else {
                    if (isResizing) return; // Prevent starting a new block if resizing
                    if (selectedBlock) deselectBlock(); // Deselect the previously selected block
                    if (!isDrawing && !isResizing && !isMoving) startDrawing(event); // Start drawing only if not resizing or moving
                }
            }
        }

        function startDrawing(event) {
            isDrawing = true;
            initialX = event.clientX - canvasRect.left + window.scrollX;
            initialY = event.clientY - canvasRect.top + window.scrollY;
            currentBlock = document.createElement('div');
            currentBlock.className = 'block';
            currentBlock.style.left = initialX + 'px';
            currentBlock.style.top = initialY + 'px';
            currentBlock.innerHTML = '<input type="text" placeholder="Block Name">';
            currentBlock.innerHTML += '<div class="resizer" onmousedown="startResize(event)"></div>'; // Add resize handler
            document.getElementById('canvas').appendChild(currentBlock);
            currentBlock.querySelector('input').focus();
            // Add block type specific HTML elements
            if (blockType === 'navbar') {
                currentBlock.innerHTML += '<nav><ul><li contenteditable="true">Item 1</li><li contenteditable="true">Item 2</li><li contenteditable="true">Item 3</li></ul></nav>';
            }
        }

        function stretchBlock(event) {
            if (!isDrawing && !isResizing && !isMoving) return;
            if (isDrawing) {
                var deltaX = event.clientX - canvasRect.left + window.scrollX - initialX;
                var deltaY = event.clientY - canvasRect.top + window.scrollY - initialY;
                currentBlock.style.width = Math.abs(deltaX) + 'px';
                currentBlock.style.height = Math.abs(deltaY) + 'px';
                currentBlock.style.left = (deltaX > 0 ? initialX : initialX + deltaX) + 'px';
                currentBlock.style.top = (deltaY > 0 ? initialY : initialY + deltaY) + 'px';
            } else if (isResizing) {
                var newWidth = event.clientX - canvasRect.left + window.scrollX - parseInt(currentBlock.style.left);
                var newHeight = event.clientY - canvasRect.top + window.scrollY - parseInt(currentBlock.style.top);
                currentBlock.style.width = newWidth + 'px';
                currentBlock.style.height = newHeight + 'px';
            } else if (isMoving) {
                var newX = event.clientX - canvasRect.left + window.scrollX - offsetX;
                var newY = event.clientY - canvasRect.top + window.scrollY - offsetY;
                currentBlock.style.left = newX + 'px';
                currentBlock.style.top = newY + 'px';
            }
        }

        function stopDrawing() {
            if (isDrawing) {
                isDrawing = false;
                blocks.push(currentBlock); // Store the created block
            }
            if (isMoving) {
                isMoving = false;
            }
        }

        function undo() {
            if (blocks.length > 0) {
                var lastBlock = blocks.pop(); // Remove the last block from the array
                lastBlock.remove(); // Remove the block from the canvas
            }
        }

        function startResize(event) {
            isResizing = true;
            event.preventDefault();
            event.stopPropagation();
        }

        function startMove(event) {
            isMoving = true;
            offsetX = event.clientX - canvasRect.left + window.scrollX - parseInt(currentBlock.style.left);
            offsetY = event.clientY - canvasRect.top + window.scrollY - parseInt(currentBlock.style.top);
            event.preventDefault();
            event.stopPropagation();
        }

        window.addEventListener('mouseup', function() {
            isResizing = false;
            isMoving = false;
        });

        function generateCode() {
            var htmlCode = '';
            var cssCode = '';
            for (var i = 0; i < blocks.length; i++) {
                var block = blocks[i];
                var blockName = block.querySelector('input').value || 'block_' + i; // Use input value if provided, else generate default name
                var topPosition = parseInt(block.style.top);
                var leftPosition = parseInt(block.style.left);
                var blockWidth = parseInt(block.style.width);
                var blockHeight = parseInt(block.style.height);

                htmlCode += '\t<div id="' + blockName + '">' + block.innerHTML + '</div>\n'; // Format HTML code with indentation
                cssCode += '#' + blockName + ' { \n' +
                           '    position: absolute; \n' +
                           '    top: ' + topPosition + 'px; \n' +
                           '    left: ' + leftPosition + 'px; \n' +
                           '    width: ' + blockWidth + 'px; \n' +
                           '    height: ' + blockHeight + 'px; \n' +
                           '    background-color: red; \n' +
                           '    border: 2px solid #000; \n' +
                           '} \n';
                // Add CSS for nav and its children if block type is navbar
                if (blockType === 'navbar') {
                    cssCode += '#' + blockName + ' nav { \n' +
                               '    display: block; \n' +
                               '    background-color: blue; \n' +
                               '} \n';
                    cssCode += '#' + blockName + ' ul { \n' +
                               '    list-style-type: none; \n' +
                               '    padding: 0; \n' +
                               '    margin: 0; \n' +
                               '} \n';
                    cssCode += '#' + blockName + ' ul li { \n' +
                               '    display: inline; \n' +
                               '    margin-right: 10px; \n' +
                               '    color: white; \n' +
                               '} \n';
                }
            }

            var generatedCode = '<!DOCTYPE html> \n' +
                                '<html lang="en"> \n' +
                                '<head> \n' +
                                '    <meta charset="UTF-8"> \n' +
                                '    <meta name="viewport" content="width=device-width, initial-scale=1.0"> \n' +
                                '    <title>Generated Block</title> \n' +
                                '    <style> \n' +
                                '        ' + cssCode + ' \n' +
                                '    </style> \n' +
                                '</head> \n' +
                                '<body> \n' +
                                htmlCode + // Insert generated HTML code
                                '</body> \n' +
                                '</html>';

            console.log(generatedCode);

            // Download the generated code as an HTML/CSS file
            var blob = new Blob([generatedCode], { type: 'text/html' });
            var a = document.createElement('a');
            a.download = 'generated_block.html';
            a.href = URL.createObjectURL(blob);
            a.click();
        }

        function selectBlock(block) {
            deselectBlock(); // Deselect any previously selected block
            selectedBlock = block;
            selectedBlock.classList.add('selected');
        }

        function deselectBlock() {
            if (selectedBlock) {
                selectedBlock.classList.remove('selected');
                selectedBlock = null;
            }
        }

        document.addEventListener('click', function(event) {
            var clickedBlock = event.target.closest('.block');
            if (clickedBlock) {
                selectBlock(clickedBlock);
            } else {
                deselectBlock();
            }
        });

        // Zoom in function
        function zoomIn() {
            var canvas = document.getElementById('canvas');
            canvas.style.width = canvas.offsetWidth * 1.1 + 'px';
            canvas.style.height = canvas.offsetHeight * 1.1 + 'px';
        }

        // Zoom out function
        function zoomOut() {
            var canvas = document.getElementById('canvas');
            canvas.style.width = canvas.offsetWidth * 0.9 + 'px';
            canvas.style.height = canvas.offsetHeight * 0.9 + 'px';
        }
    </script>
</body>
</html>
